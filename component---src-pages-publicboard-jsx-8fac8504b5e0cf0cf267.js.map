{"version":3,"sources":["webpack:///./src/services/leaderboard.js","webpack:///./src/pages/publicboard.jsx","webpack:///./src/commons/Form/index.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/services/colleges.js","webpack:///./src/services/events.js"],"names":["get","async","response","request","status","data","toast","getPublic","getRound","event","round","getWinners","publish","leaderboard","remove_college_list","name","location","remove_event_list","_default","_React$Component","props","_this","call","state","events","colleges","set","total","tableJSX","Glamor","createElement","className","style","width","map","index","key","college","getPoints","getTotal","render","Layout","showButton","Button","onClick","sortByRank","styles","marginLeft","sortByName","generatePDF","overflow","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","componentWillMount","this","init","leaderboardService","then","lb","setState","sort","a","b","parseFloat","points","console","log","eventsService","getAll","startDate","filter","ev","undefined","find","r_ev","collegeService","r_college","forEach","id","teams","team","_id","maxMembersPerTeam","rank","ReactDOMServer","renderToString","window","printWindow","open","document","write","close","print","React","Component","Input","onChange","e","target","autoComplete","type","min","max","value","readOnly","disabled","placeholder","css","TextArea","_len","arguments","length","args","Array","_key","apply","concat","componentWillReceiveProps","newProps","children","margin","self","ReferenceError","create","update","collegeID","message","getTeams","getParticipants","getCollege","fetch","constants","server","credentials","json","err","getAllEventRankings","getPublishedEventRankings","createRound","eventID","createScores","eventId","roundId","judgeId","scores","createSlots","roundID","createSlots2","createTeam","deleteRound","deleteTeam","teamID","getScores","getRounds","getSlots","getSlots2","deleteSlots2","getTeamsByRound","updateRound","updateTeam","updateTeamScores","publishRoundLeaderboard","updateSlotBias","backupScores","backupData","getBackup","deleteBackup"],"mappings":"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","file":"component---src-pages-publicboard-jsx-8fac8504b5e0cf0cf267.js","sourcesContent":["import request from \"../utils/request.js\";\nimport toast from '../reducers/toastReducer.js';\n\nconst get = async () => {\n  let response = await request(\"/leaderboard\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst getPublic = async () => {\n  let response = await request(\"/leaderboard/public\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst getRound = async (event,round) => {\n  let response = await request(`/events/${event}/rounds/${round}/leaderboard`);\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst getWinners = async (event,round) => {\n  let response = await request(\"/leaderboard/winners\");\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst publish = async (leaderboard) => {\n  let response = await request(\"/leaderboard/publish\", \"POST\", leaderboard);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nexport default {\n  get,\n  getPublic,\n  getRound,\n  getWinners,\n  publish,\n};\n","import React from \"react\";\n\nimport request from \"../utils/request.js\";\nimport Layout from \"../layouts/app\";\nimport eventsService from '../services/events'\nimport leaderboardService from '../services/leaderboard';\nimport collegeService from '../services/colleges';\nimport { Button } from '../commons/Form';\nimport ReactDOMServer from 'react-dom/server';\n\nimport \"./index.css\"\n\n\nconst remove_college_list = [{name:\"Cultural Coordination Committee\", location:\"Manipal\"}, {name:\"Kasturba Hospital\", location:\"Manipal\"}, {name:\"MAHE\", location:\"Manipal\"}];\nconst remove_event_list = [\"Staff Cooking: Vegetarian\", \"Staff Cooking: Non-Vegetarian\", \"Staff Cooking: Sweets and Desserts\", \"Staff Vegetable & Fruit Carving\",\"Staff Variety Entertainment\", \"Poetry (Kannada)\"];\n\nexport default class extends React.Component {\n  state = {\n    status: \"...\",\n    events: [],\n    colleges: [],\n    set: [],\n    total: {}\n  }\n  constructor(props) {\n    super(props);\n    this.getPoints = this.getPoints.bind(this);\n    this.sortByRank = this.sortByRank.bind(this);\n    this.sortByName = this.sortByName.bind(this);\n    this.generatePDF = this.generatePDF.bind(this);\n    this.tableJSX = this.tableJSX.bind(this);\n  }\n  componentWillMount() {\n    this.init();\n\n    //just testing delete this block before pushing \n    \n    leaderboardService.getPublic().then(lb =>\n      this.setState({\n        leaderboard: lb.sort((a, b) => parseFloat(b.points) - parseFloat(a.points)),\n      })\n    );\n    console.log(this.leaderboard,\"leaderboard\");\n    //block ends here\n  }\n  async init() {\n    await this.setState({ status: \"Fetching events...\" });\n    let events = await eventsService.getAll();\n    events = events.sort((a, b) => a.startDate < b.startDate ? -1 : (a.startDate > b.startDate ? 1 : 0));\n    console.log(events);\n    events = events.filter((ev)=>{\n      return (remove_event_list.find(r_ev => r_ev == ev.name) == undefined);\n    })\n    await this.setState({ status: \"Fetching colleges\", events });\n    let colleges = await collegeService.getAll();\n    colleges = colleges.sort((a, b) => a.name < b.name ? -1 : (a.name > b.name ? 1 : 0));\n    colleges = colleges.filter((college)=>{ // Filter out the colleges that shouldn't be in the leaderboard\n      return (remove_college_list.find(r_college => r_college.name == college.name && r_college.location == college.location) == undefined);\n    })\n    await this.setState({ colleges });\n    let set = [];\n    \n    let response = await request(\"/leaderboard/getleaderboard\");\n    set = response.data;\n    this.setState({ set });\n    let total = {};\n    colleges.forEach(college => {\n      total[college.id] = this.getTotal(college);\n    })\n    this.setState({ status: \"Done\", showButton: true, total });\n  }\n  getPoints(event, college) {\n    let teams = this.state.set.filter(team => team.college._id === college.id && team.event === event.id);\n    let points = 0;\n    teams.forEach(team => {\n      if (event.maxMembersPerTeam > 1) {\n        switch (team.rank) {\n          case 1: points += 14; break;\n          case 2: points += 10; break;\n          case 3: points += 8; break;\n          default: points += 0;\n        }\n      }\n      else {\n        switch (team.rank) {\n          case 1: points += 10; break;\n          case 2: points += 8; break;\n          case 3: points += 6; break;\n          default: points += 0;\n        }\n      }\n    });\n\n    if (points > 0)\n      return points;\n    else\n      return '';\n  }\n  getTotal(college) {\n    let teams = this.state.set.filter(team => team.college._id === college.id);\n    let points = 0;\n    teams.forEach(team => {\n      let event = this.state.events.find(event => event.id === team.event);\n      if (event.maxMembersPerTeam > 1) {\n        switch (team.rank) {\n          case 1: points += 14; break;\n          case 2: points += 10; break;\n          case 3: points += 8; break;\n          default: points += 0;\n        }\n      }\n      else {\n        switch (team.rank) {\n          case 1: points += 10; break;\n          case 2: points += 8; break;\n          case 3: points += 6; break;\n          default: points += 0;\n        }\n      }\n    });\n    return points;\n  }\n  sortByRank() {\n    let colleges = this.state.colleges.sort((a, b) => this.state.total[b.id] - this.state.total[a.id]);\n    this.setState({ colleges });\n  }\n  sortByName() {\n    let colleges = this.state.colleges.sort((a, b) => a.name < b.name ? -1 : (a.name > b.name ? 1 : 0));\n    this.setState({ colleges });\n  }\n  tableJSX = ()=>{\n    return (<div className=\"leaderboard-containter-pdf\">\n    <table className=\"leaderboard\" style={{width: \"100%\", }}>\n      <thead>\n        <tr>\n          <th>&nbsp;</th>\n          {this.state.events.map((event, index) => <th key={index}>{event.name}</th>)}\n          <th>Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          this.state.colleges.map((college, index) =>\n            <tr key={index}>\n              <th>{college.name},{college.location}</th>\n              {this.state.events.map((event, index) => <th key={index}>{this.getPoints(event, college)}</th>)}\n              <th>{this.getTotal(college)}</th>\n            </tr>)\n        }\n        \n      </tbody>\n    </table>\n  </div>)\n  }\n  generatePDF(){\n    const tableJSX = ReactDOMServer.renderToString(this.tableJSX());\n    const style = `\n       <style>\n          @media print{@page {size: landscape}}\n          body{\n            font-family: sans-serif;\n          }\n          .leaderboard th{\n            width: 100px;\n            border: 1px solid #000;\n            padding: 5px;\n          } \n\n          table{\n            border-collapse: collapse !important;\n          }\n\n          tr:nth-child(odd){\n            background-color: #eee;\n          }\n       </style>\n    `\n    // const opt = {\n    //   jsPDF: {\n    //     format: 'a3',\n    //     orientation: 'landscape',\n        \n    //   },\n    //   pagebreak: {mode:\"avoid-all\"},\n    //   html2canvas:  { scale: 4, },\n    //   margin: 1,\n    //   image: {type: 'jpeg', quality: 0.98},\n    //   filename: 'overall_leaderboard.pdf'\n    // }\n    // html2pdf().set(opt).from(tableJSX).save();\n    if(typeof window != \"undefined\"){\n      const printWindow = window.open(\"\",\"Utsav 2024\",\"width=1485mm,height=550mm\");\n            \n            printWindow.document.write(\"<html><head><title>Utsav 2023</title>\");\n            printWindow.document.write(style);\n            printWindow.document.write(\"</head><body>\");\n            printWindow.document.write(tableJSX);\n            printWindow.document.write(\"</body></html>\");\n            printWindow.document.close();\n\n            // printWindow.close();\n            printWindow.print();\n    }\n  }\n  render = () => (\n    <Layout>\n      <h1 className=\"mucapp\">Public Leaderboard</h1>\n      <div className=\"no-print\">\n        {this.state.status}\n        {this.state.showButton ? <Button onClick={this.sortByRank} styles={{ marginLeft: 20 }}>Sort By Rank</Button> : ''}\n        {this.state.showButton ? <Button onClick={this.sortByName} styles={{ marginLeft: 20 }}>Sort By College Name</Button> : ''}\n        <Button onClick={this.generatePDF} styles={{ marginLeft: 20 }}>Generate PDF</Button>\n      </div>\n      <div className=\"leaderboardContainer\">\n        <table className=\"leaderboard\" style={{ overflow: \"scroll\" }}>\n          <thead>\n            <tr>\n              <th>&nbsp;</th>\n              {this.state.events.map((event, index) => <th key={index}>{event.name}</th>)}\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.colleges.map((college, index) =>\n                <tr key={index}>\n                  <th>{college.name},{college.location}</th>\n                  {this.state.events.map((event, index) => <th key={index}>{this.getPoints(event, college)}</th>)}\n                  <th>{this.getTotal(college)}</th>\n                </tr>)\n            }\n          </tbody>\n        </table>\n      </div>\n      \n    </Layout>\n  );\n};\n","import React from 'react';\n\nconst Input = (props) => (\n  <input\n    className=\"mucapp\"\n    onChange={(e) => props.onChange(e.target)}\n    autoComplete=\"off\"\n    name={props.name}\n    type={props.type}\n    min={props.min}\n    max={props.max}\n    value={props.value}\n    readOnly={props.disabled}\n    placeholder={props.placeholder}\n    css={{\n      ...props.styles,\n    }}\n  />\n);\n\nclass TextArea extends React.Component {\n  state = {\n    value: ''\n  }\n  componentWillReceiveProps(newProps) {\n    this.setState({ value: newProps.children });\n\n  }\n  render() {\n    let props = this.props;\n    return (\n      <textarea\n        className=\"mucapp\"\n        onChange={(e) => props.onChange(e.target)}\n        autoComplete=\"off\"\n        name={props.name}\n        type={props.type}\n        placeholder={props.placeholder}\n        css={{\n          ...props.styles,\n        }}\n        value={this.state.value}\n      ></textarea>\n    );\n  }\n}\n\nconst Tag = (props) => (\n  <div css={{\n    ...props.styles,\n    display: \"inline-block\"\n  }}>\n    {(props.type === 1) ?\n      <div css={{\n        fontSize: \"12px\",\n        backgroundColor: \"#108ee9\",\n        color: \"#ffffff\",\n        padding: \"4px\",\n        borderRadius: \"3px\"\n      }}>\n        scheduled\n      </div>\n      :\n      (props.type === 2) ?\n        <div css={{\n          fontSize: \"12px\",\n          backgroundColor: \"#87d068\",\n          color: \"#ffffff\",\n          padding: \"4px\",\n          borderRadius: \"3px\"\n        }}>\n          In Process\n        </div> :\n        <div css={{\n          fontSize: \"12px\",\n          backgroundColor: \"#f5222d\",\n          color: \"#ffffff\",\n          padding: \"4px\",\n          borderRadius: \"3px\"\n        }}>\n          Finished\n        </div>\n    }\n  </div>\n);\n\nconst Button = (props) => (\n  <button\n    css={{\n      ...props.styles,\n      margin: 2\n    }}\n    className=\"mucapp\"\n    onClick={props.onClick}\n    disabled={props.disabled ? \"disabled\" : false}\n  >\n    {props.children}\n  </button>\n);\n\nexport {\n  Input,\n  Button,\n  Tag,\n  TextArea\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import request from \"../utils/request.js\";\nimport constants from \"../utils/constants.js\";\nimport { toast } from \"../actions/toastActions.js\";\n\nconst create = async (college) => {\n  let response = await request(\"/colleges\", \"POST\", college);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst update = async (college) => {\n  let response = await request(\"/colleges\", \"PATCH\", college);\n\n  if (response && response.status === 200) {\n    return response;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst get = async (collegeID) => {\n  try {\n    let response = await request(\"/colleges/\" + collegeID);\n\n    if (response && response.status === 200) {\n      return response.data;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      return null;\n    }\n  }\n  catch (e) {\n    toast(e.message)\n  }\n};\n\nconst getAll = async () => {\n  let response = await request(\"/colleges\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getCollege = async (college) => {\n  try {\n\n    let response = typeof window !== \"undefined\" && await window.fetch(`${constants.server}/colleges/${college}`, {\n      credentials: \"include\"\n    });\n    let json = await response.json();\n    if (json.status === 200)\n      return json.data;\n    else\n      toast(json.message);\n  }\n  catch (err) {\n    toast(err.message);\n  }\n\n}\n\nconst getTeams = async (collegeID) => {\n  let response;\n\n  if (collegeID) {\n    response = await request(\"/colleges/\" + collegeID + \"/teams\");\n  } else {\n    response = await request(\"/colleges/teams\");\n  }\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\n\nconst getParticipants = async (collegeID) => {\n  let response;\n\n  if (collegeID) {\n    response = await request(\"/colleges/\" + collegeID + \"/participants\");\n  } else {\n    response = await request(\"/colleges/participants\");\n  }\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getAllEventRankings = async (collegeID) => {\n  let response;\n  if (collegeID)\n    response = await request(\"/colleges/\" + collegeID + \"/rankings\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getPublishedEventRankings = async (collegeID) => {\n  let response;\n  if (collegeID)\n    response = await request(\"/colleges/\" + collegeID + \"/public-rankings\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nexport default {\n  create,\n  update,\n  get,\n  getAll,\n  getTeams,\n  getParticipants,\n  getCollege,\n  getAllEventRankings,\n  getPublishedEventRankings,\n};\n","import request from \"../utils/request.js\";\nimport { toast } from \"../actions/toastActions.js\";\n\nconst create = async (event) => {\n  let response = await request(\"/events\", \"POST\", event);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst createRound = async (eventID, round) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds\", \"POST\", round);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst updateRound = async (eventID, roundID, round) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID, \"POST\", round);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst deleteRound = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID, \"DELETE\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst createScores = async (eventId, roundId, judgeId, scores) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}`, \"POST\", scores);\n    console.log({ response })\n    if (response && response.status === 200) {\n      return true;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(response.message);\n      return false;\n    }\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\n\nconst backupScores = async (eventId, roundId, judgeId, backupData) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}/backup`, \"POST\", backupData);\n    console.log({ response })\n    if (response && response.status === 200) {\n      return true;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(\"Warning!: Failed to backup scores on server. Reason: \" + response.message);\n      return false;\n    }\n  } catch (e) {\n    console.log(e);\n    toast(\"Warning!: Failed to backup scores on server. Reason: \" + e.message);\n    return false;\n  }\n};\n\nconst getBackup = async (eventId, roundId, judgeId) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}/backup`, \"GET\");\n    if (response && response.status === 200) {\n      return response.data;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(\"Failed to fetch backup, reason: \" + response.message);\n      return false;\n    }\n  } catch (e) {\n    toast(\"Warning!: Failed to fetch backup. Reason: \" + e.message);\n    return false;\n  }\n};\n\n\nconst deleteBackup = async (eventId, roundId, judgeId) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}/backup`, \"DELETE\");\n    if (response && response.status === 200) {\n      return true;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(\"Failed to delete backup, reason: \" + response.message);\n      return false;\n    }\n  } catch (e) {\n    toast(\"Warning!: Failed to delete backup. Reason: \" + e.message);\n    return false;\n  }\n};\n\nconst getScores = async (eventId, roundId, judgeId) => {\n  let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}`, \"GET\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst createSlots = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots\", \"POST\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n\n    return [];\n  }\n};\n\nconst createSlots2 = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots2\", \"POST\");\n  if (!response) {\n    toast(\"Slotting: No response recieved\");\n    return [];\n  }\n\n  if (response.status === 200)\n    return response.data;\n\n  if (response.status === \"401\") {\n    toast(\"Your session has expired, please logout and login again.\")\n    if (response && response.status === 404)\n      toast(\"API not found\")\n    return [];\n  }\n\n  toast(response.message)\n  return [];\n\n};\n\nconst createTeam = async (eventID, team) => {\n  let response = await request(\"/events/\" + eventID + \"/teams\", \"POST\", team);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst updateTeam = async (eventID, teamID, team) => {\n\n  let response = await request(\"/events/\" + eventID + \"/teams/\" + teamID, \"PATCH\", team);\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst deleteTeam = async (eventID, teamID) => {\n  let response = await request(\"/events/\" + eventID + \"/teams/\" + teamID, \"DELETE\");\n\n\n  if (response && response.status === 200) {\n    // return response.data;\n    return true;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    else if(response && response.status === 400){\n      // console.log(response)\n      toast(response.message)\n    }\n    return null;\n  }\n};\n\nconst get = async (eventID) => {\n  let response = await request(\"/events/\" + eventID);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst getAll = async () => {\n  let response = await request(\"/events\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getRound = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst getRounds = async (eventID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getSlots = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getSlots2 = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots2\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    if (response && response.status === 404)\n      toast(\"Api not found\")\n    return [];\n  }\n};\n\nconst deleteSlots2 = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots2/delete\");\n\n  if (response && response.status === 200) {\n    return true;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    if (response && response.status === 404)\n      toast(\"Api not found\")\n    return false;\n  }\n};\n\nconst getTeams = async (eventID) => {\n  let response = await request(\"/events/\" + eventID + \"/teams\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    return [];\n  }\n};\n\nconst getTeamsByRound = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/teams\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst updateTeamScores = async (eventID, roundID, teams) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/scores\", \"PATCH\", teams);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    else toast(response.message);\n    return null;\n  }\n};\n\nconst updateSlotBias = async (eventID, roundID, teams) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/bias\", \"PATCH\", teams);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    else toast(response.message);\n    return null;\n  }\n};\n\nconst publishRoundLeaderboard = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/leaderboard\", \"PATCH\", {});\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    else toast(response.message);\n    return null;\n  }\n};\n\nexport default {\n  create,\n  createRound,\n  createScores,\n  createSlots,\n  createSlots2,\n  createTeam,\n  deleteRound,\n  deleteTeam,\n  get,\n  getAll,\n  getRound,\n  getScores,\n  getRounds,\n  getSlots,\n  getSlots2,\n  deleteSlots2,\n  getTeams,\n  getTeamsByRound,\n  updateRound,\n  updateTeam,\n  updateTeamScores,\n  publishRoundLeaderboard,\n  updateSlotBias,\n  backupScores,\n  getBackup,\n  deleteBackup\n};\n"],"sourceRoot":""}