{"version":3,"sources":["webpack:///./src/services/leaderboard.js","webpack:///./src/commons/Form/index.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/services/colleges.js","webpack:///./src/pages/board.jsx","webpack:///./src/services/events.js"],"names":["get","async","response","request","status","data","toast","getPublic","getRound","event","round","getWinners","publish","leaderboard","Input","props","Glamor","createElement","className","onChange","e","target","autoComplete","name","type","min","max","value","readOnly","disabled","placeholder","css","styles","TextArea","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","state","_inheritsLoose","_proto","prototype","componentWillReceiveProps","newProps","this","setState","children","render","React","Component","Button","margin","onClick","_assertThisInitialized","self","ReferenceError","create","college","update","collegeID","message","getAll","getTeams","getParticipants","getCollege","window","fetch","constants","server","credentials","json","err","getAllEventRankings","getPublishedEventRankings","remove_college_list","location","remove_event_list","_default","events","colleges","set","total","Layout","showButton","sortByRank","marginLeft","sortByName","style","overflow","map","index","key","getPoints","getTotal","bind","componentWillMount","getUser","navigate","init","eventsService","sort","a","b","startDate","filter","ev","undefined","find","r_ev","collegeService","r_college","i","faculty","rounds","leaderboardService","id","forEach","item","rank","push","slot","teams","team","_id","points","maxMembersPerTeam","createRound","eventID","createScores","eventId","roundId","judgeId","scores","console","log","createSlots","roundID","createSlots2","createTeam","deleteRound","deleteTeam","teamID","getScores","getRounds","getSlots","getSlots2","deleteSlots2","getTeamsByRound","updateRound","updateTeam","updateTeamScores","publishRoundLeaderboard","updateSlotBias","backupScores","backupData","getBackup","deleteBackup"],"mappings":"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","file":"component---src-pages-board-jsx-e0eefa8e2add6a9ce69a.js","sourcesContent":["import request from \"../utils/request.js\";\nimport toast from '../reducers/toastReducer.js';\n\nconst get = async () => {\n  let response = await request(\"/leaderboard\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst getPublic = async () => {\n  let response = await request(\"/leaderboard/public\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst getRound = async (event,round) => {\n  let response = await request(`/events/${event}/rounds/${round}/leaderboard`);\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst getWinners = async (event,round) => {\n  let response = await request(\"/leaderboard/winners\");\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nconst publish = async (leaderboard) => {\n  let response = await request(\"/leaderboard/publish\", \"POST\", leaderboard);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    return [];\n  }\n};\n\nexport default {\n  get,\n  getPublic,\n  getRound,\n  getWinners,\n  publish,\n};\n","import React from 'react';\n\nconst Input = (props) => (\n  <input\n    className=\"mucapp\"\n    onChange={(e) => props.onChange(e.target)}\n    autoComplete=\"off\"\n    name={props.name}\n    type={props.type}\n    min={props.min}\n    max={props.max}\n    value={props.value}\n    readOnly={props.disabled}\n    placeholder={props.placeholder}\n    css={{\n      ...props.styles,\n    }}\n  />\n);\n\nclass TextArea extends React.Component {\n  state = {\n    value: ''\n  }\n  componentWillReceiveProps(newProps) {\n    this.setState({ value: newProps.children });\n\n  }\n  render() {\n    let props = this.props;\n    return (\n      <textarea\n        className=\"mucapp\"\n        onChange={(e) => props.onChange(e.target)}\n        autoComplete=\"off\"\n        name={props.name}\n        type={props.type}\n        placeholder={props.placeholder}\n        css={{\n          ...props.styles,\n        }}\n        value={this.state.value}\n      ></textarea>\n    );\n  }\n}\n\nconst Tag = (props) => (\n  <div css={{\n    ...props.styles,\n    display: \"inline-block\"\n  }}>\n    {(props.type === 1) ?\n      <div css={{\n        fontSize: \"12px\",\n        backgroundColor: \"#108ee9\",\n        color: \"#ffffff\",\n        padding: \"4px\",\n        borderRadius: \"3px\"\n      }}>\n        scheduled\n      </div>\n      :\n      (props.type === 2) ?\n        <div css={{\n          fontSize: \"12px\",\n          backgroundColor: \"#87d068\",\n          color: \"#ffffff\",\n          padding: \"4px\",\n          borderRadius: \"3px\"\n        }}>\n          In Process\n        </div> :\n        <div css={{\n          fontSize: \"12px\",\n          backgroundColor: \"#f5222d\",\n          color: \"#ffffff\",\n          padding: \"4px\",\n          borderRadius: \"3px\"\n        }}>\n          Finished\n        </div>\n    }\n  </div>\n);\n\nconst Button = (props) => (\n  <button\n    css={{\n      ...props.styles,\n      margin: 2\n    }}\n    className=\"mucapp\"\n    onClick={props.onClick}\n    disabled={props.disabled ? \"disabled\" : false}\n  >\n    {props.children}\n  </button>\n);\n\nexport {\n  Input,\n  Button,\n  Tag,\n  TextArea\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import request from \"../utils/request.js\";\nimport constants from \"../utils/constants.js\";\nimport { toast } from \"../actions/toastActions.js\";\n\nconst create = async (college) => {\n  let response = await request(\"/colleges\", \"POST\", college);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst update = async (college) => {\n  let response = await request(\"/colleges\", \"PATCH\", college);\n\n  if (response && response.status === 200) {\n    return response;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst get = async (collegeID) => {\n  try {\n    let response = await request(\"/colleges/\" + collegeID);\n\n    if (response && response.status === 200) {\n      return response.data;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      return null;\n    }\n  }\n  catch (e) {\n    toast(e.message)\n  }\n};\n\nconst getAll = async () => {\n  let response = await request(\"/colleges\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getCollege = async (college) => {\n  try {\n\n    let response = typeof window !== \"undefined\" && await window.fetch(`${constants.server}/colleges/${college}`, {\n      credentials: \"include\"\n    });\n    let json = await response.json();\n    if (json.status === 200)\n      return json.data;\n    else\n      toast(json.message);\n  }\n  catch (err) {\n    toast(err.message);\n  }\n\n}\n\nconst getTeams = async (collegeID) => {\n  let response;\n\n  if (collegeID) {\n    response = await request(\"/colleges/\" + collegeID + \"/teams\");\n  } else {\n    response = await request(\"/colleges/teams\");\n  }\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\n\nconst getParticipants = async (collegeID) => {\n  let response;\n\n  if (collegeID) {\n    response = await request(\"/colleges/\" + collegeID + \"/participants\");\n  } else {\n    response = await request(\"/colleges/participants\");\n  }\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getAllEventRankings = async (collegeID) => {\n  let response;\n  if (collegeID)\n    response = await request(\"/colleges/\" + collegeID + \"/rankings\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getPublishedEventRankings = async (collegeID) => {\n  let response;\n  if (collegeID)\n    response = await request(\"/colleges/\" + collegeID + \"/public-rankings\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nexport default {\n  create,\n  update,\n  get,\n  getAll,\n  getTeams,\n  getParticipants,\n  getCollege,\n  getAllEventRankings,\n  getPublishedEventRankings,\n};\n","import React from \"react\";\n\nimport Layout from \"../layouts/app\";\nimport eventsService from '../services/events'\nimport leaderboardService from '../services/leaderboard';\nimport collegeService from '../services/colleges';\nimport { Button } from '../commons/Form';\nimport { getUser } from \"../services/userServices\";\nimport { navigate } from \"gatsby\";\n\nconst remove_college_list = [{name:\"Cultural Coordination Committee\", location:\"Manipal\"}, {name:\"Kasturba Hospital\", location:\"Manipal\"}, {name:\"MAHE\", location:\"Manipal\"}];\nconst remove_event_list = [\"Staff Cooking: Vegetarian\", \"Staff Cooking: Non-Vegetarian\", \"Staff Cooking: Sweets and Desserts\", \"Staff Vegetable & Fruit Carving\", \"Staff Variety Entertainment\", \"Poetry (Kannada)\"];\nexport default class extends React.Component {\n  state = {\n    status: \"...\",\n    events: [],\n    colleges: [],\n    set: [],\n    total: {}\n  }\n  constructor(props) {\n    super(props);\n    this.getPoints = this.getPoints.bind(this);\n    this.sortByRank = this.sortByRank.bind(this);\n    this.sortByName = this.sortByName.bind(this);\n  }\n  componentWillMount() {\n    if (1 < getUser().type)\n      navigate(\"/\");\n    else\n      this.init();\n  }\n  async init() {\n    await this.setState({ status: \"Fetching events...\" });\n    let events = await eventsService.getAll();\n    events = events.sort((a, b) => a.startDate < b.startDate ? -1 : (a.startDate > b.startDate ? 1 : 0));\n    events = events.filter((ev)=>{\n      return (remove_event_list.find(r_ev => r_ev == ev.name) == undefined);\n    })\n    await this.setState({ status: \"Fetching colleges\", events });\n    let colleges = await collegeService.getAll();\n    colleges = colleges.sort((a, b) => a.name < b.name ? -1 : (a.name > b.name ? 1 : 0));\n    colleges = colleges.filter((college)=>{ // Filter out the colleges that shouldn't be in the leaderboard\n      return (remove_college_list.find(r_college => r_college.name == college.name && r_college.location == college.location) == undefined);\n    })\n    await this.setState({ colleges });\n    let set = [];\n    for (let i = 0; i < events.length; i++) {\n      let event = events[i];\n      if (event.faculty)\n        continue;\n\n      await this.setState({ status: \"Fetching  \" + event.name + \" leaderboard...\" });\n      //Fetch rounds leaderboard (only last)\n      if (event.rounds.length == 0)\n        continue;//skip if no rounds found\n      let leaderboard = await leaderboardService.getRound(event.id, event.rounds[event.rounds.length - 1]);\n\n      //Get rank\n      leaderboard.forEach(item => {\n        // #TODO, two teams of same college winning in one event.\n        if (item.rank <= 3) {\n          set.push({\n            college: item.slot.college,\n            event: event.id,\n            rank: item.rank\n          });\n        }\n      });\n      this.setState({ set })\n    }\n    let total = {};\n    colleges.forEach(college => {\n      total[college.id] = this.getTotal(college);\n    })\n    this.setState({ status: \"Done\", showButton: true, total });\n  }\n  getPoints(event, college) {\n    let teams = this.state.set.filter(team => team.college._id === college.id && team.event === event.id);\n    let points = 0;\n    teams.forEach(team => {\n      if (event.maxMembersPerTeam > 1) {\n        switch (team.rank) {\n          case 1: points += 14; break;\n          case 2: points += 10; break;\n          case 3: points += 8; break;\n          default: points += 0;\n        }\n      }\n      else {\n        switch (team.rank) {\n          case 1: points += 10; break;\n          case 2: points += 8; break;\n          case 3: points += 6; break;\n          default: points += 0;\n        }\n      }\n    });\n\n    if (points > 0)\n      return points;\n    else\n      return '';\n  }\n  getTotal(college) {\n    let teams = this.state.set.filter(team => team.college._id === college.id);\n    let points = 0;\n    teams.forEach(team => {\n      let event = this.state.events.find(event => event.id === team.event);\n      if (event.maxMembersPerTeam > 1) {\n        switch (team.rank) {\n          case 1: points += 14; break;\n          case 2: points += 10; break;\n          case 3: points += 8; break;\n          default: points += 0;\n        }\n      }\n      else {\n        switch (team.rank) {\n          case 1: points += 10; break;\n          case 2: points += 8; break;\n          case 3: points += 6; break;\n          default: points += 0;\n        }\n      }\n    });\n    return points;\n  }\n  sortByRank() {\n    let colleges = this.state.colleges.sort((a, b) => this.state.total[b.id] - this.state.total[a.id]);\n    this.setState({ colleges });\n  }\n  sortByName() {\n    let colleges = this.state.colleges.sort((a, b) => a.name < b.name ? -1 : (a.name > b.name ? 1 : 0));\n    this.setState({ colleges });\n  }\n  render = () => (\n    <Layout>\n      <h1 className=\"mucapp\"> Leaderboard</h1>\n      <div className=\"no-print\">\n        {this.state.status}\n        {this.state.showButton ? <Button onClick={this.sortByRank} styles={{ marginLeft: 20 }}>Sort By Rank</Button> : ''}\n        {this.state.showButton ? <Button onClick={this.sortByName} styles={{ marginLeft: 20 }}>Sort By College Name</Button> : ''}\n      </div>\n      <div className=\"leaderboardContainer\" style={{ overflow: \"scroll\" }}>\n        <table className=\"leaderboard\">\n          <thead>\n            <tr>\n              <th>&nbsp;</th>\n              {this.state.events.map((event, index) => <th key={index}>{event.name}</th>)}\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.colleges.map((college, index) =>\n                <tr key={index}>\n                  <th>{college.name},{college.location}</th>\n                  {this.state.events.map((event, index) => <th key={index}>{this.getPoints(event, college)}</th>)}\n                  <th>{this.getTotal(college)}</th>\n                </tr>)\n            }\n          </tbody>\n        </table>\n      </div>\n    </Layout>\n  );\n};\n","import request from \"../utils/request.js\";\nimport { toast } from \"../actions/toastActions.js\";\n\nconst create = async (event) => {\n  let response = await request(\"/events\", \"POST\", event);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst createRound = async (eventID, round) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds\", \"POST\", round);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst updateRound = async (eventID, roundID, round) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID, \"POST\", round);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst deleteRound = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID, \"DELETE\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst createScores = async (eventId, roundId, judgeId, scores) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}`, \"POST\", scores);\n    console.log({ response })\n    if (response && response.status === 200) {\n      return true;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(response.message);\n      return false;\n    }\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\n\nconst backupScores = async (eventId, roundId, judgeId, backupData) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}/backup`, \"POST\", backupData);\n    console.log({ response })\n    if (response && response.status === 200) {\n      return true;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(\"Warning!: Failed to backup scores on server. Reason: \" + response.message);\n      return false;\n    }\n  } catch (e) {\n    console.log(e);\n    toast(\"Warning!: Failed to backup scores on server. Reason: \" + e.message);\n    return false;\n  }\n};\n\nconst getBackup = async (eventId, roundId, judgeId) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}/backup`, \"GET\");\n    if (response && response.status === 200) {\n      return response.data;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(\"Failed to fetch backup, reason: \" + response.message);\n      return false;\n    }\n  } catch (e) {\n    toast(\"Warning!: Failed to fetch backup. Reason: \" + e.message);\n    return false;\n  }\n};\n\n\nconst deleteBackup = async (eventId, roundId, judgeId) => {\n  try {\n    let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}/backup`, \"DELETE\");\n    if (response && response.status === 200) {\n      return true;\n    } else {\n      if (response && response.status === \"401\")\n        toast(\"Your session has expired, please logout and login again.\")\n      else\n        toast(\"Failed to delete backup, reason: \" + response.message);\n      return false;\n    }\n  } catch (e) {\n    toast(\"Warning!: Failed to delete backup. Reason: \" + e.message);\n    return false;\n  }\n};\n\nconst getScores = async (eventId, roundId, judgeId) => {\n  let response = await request(`/events/${eventId}/rounds/${roundId}/judges/${judgeId}`, \"GET\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst createSlots = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots\", \"POST\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n\n    return [];\n  }\n};\n\nconst createSlots2 = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots2\", \"POST\");\n  if (!response) {\n    toast(\"Slotting: No response recieved\");\n    return [];\n  }\n\n  if (response.status === 200)\n    return response.data;\n\n  if (response.status === \"401\") {\n    toast(\"Your session has expired, please logout and login again.\")\n    if (response && response.status === 404)\n      toast(\"API not found\")\n    return [];\n  }\n\n  toast(response.message)\n  return [];\n\n};\n\nconst createTeam = async (eventID, team) => {\n  let response = await request(\"/events/\" + eventID + \"/teams\", \"POST\", team);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst updateTeam = async (eventID, teamID, team) => {\n\n  let response = await request(\"/events/\" + eventID + \"/teams/\" + teamID, \"PATCH\", team);\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst deleteTeam = async (eventID, teamID) => {\n  let response = await request(\"/events/\" + eventID + \"/teams/\" + teamID, \"DELETE\");\n\n\n  if (response && response.status === 200) {\n    // return response.data;\n    return true;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    else if(response && response.status === 400){\n      // console.log(response)\n      toast(response.message)\n    }\n    return null;\n  }\n};\n\nconst get = async (eventID) => {\n  let response = await request(\"/events/\" + eventID);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst getAll = async () => {\n  let response = await request(\"/events\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getRound = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return null;\n  }\n};\n\nconst getRounds = async (eventID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getSlots = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst getSlots2 = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots2\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    if (response && response.status === 404)\n      toast(\"Api not found\")\n    return [];\n  }\n};\n\nconst deleteSlots2 = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/slots2/delete\");\n\n  if (response && response.status === 200) {\n    return true;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    if (response && response.status === 404)\n      toast(\"Api not found\")\n    return false;\n  }\n};\n\nconst getTeams = async (eventID) => {\n  let response = await request(\"/events/\" + eventID + \"/teams\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    return [];\n  }\n};\n\nconst getTeamsByRound = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/teams\");\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === \"401\")\n      toast(\"Your session has expired, please logout and login again.\")\n    return [];\n  }\n};\n\nconst updateTeamScores = async (eventID, roundID, teams) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/scores\", \"PATCH\", teams);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    else toast(response.message);\n    return null;\n  }\n};\n\nconst updateSlotBias = async (eventID, roundID, teams) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/bias\", \"PATCH\", teams);\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    else toast(response.message);\n    return null;\n  }\n};\n\nconst publishRoundLeaderboard = async (eventID, roundID) => {\n  let response = await request(\"/events/\" + eventID + \"/rounds/\" + roundID + \"/leaderboard\", \"PATCH\", {});\n\n  if (response && response.status === 200) {\n    return response.data;\n  } else {\n    if (response && response.status === 401) toast(\"Your session has expired, please logout and login again.\");\n    else toast(response.message);\n    return null;\n  }\n};\n\nexport default {\n  create,\n  createRound,\n  createScores,\n  createSlots,\n  createSlots2,\n  createTeam,\n  deleteRound,\n  deleteTeam,\n  get,\n  getAll,\n  getRound,\n  getScores,\n  getRounds,\n  getSlots,\n  getSlots2,\n  deleteSlots2,\n  getTeams,\n  getTeamsByRound,\n  updateRound,\n  updateTeam,\n  updateTeamScores,\n  publishRoundLeaderboard,\n  updateSlotBias,\n  backupScores,\n  getBackup,\n  deleteBackup\n};\n"],"sourceRoot":""}